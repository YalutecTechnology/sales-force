// Code generated by mockery 2.7.4. DO NOT EDIT.

package services

import (
	mock "github.com/stretchr/testify/mock"
	http "net/http"

	chat "yalochat.com/salesforce-integration/base/clients/chat"
	proxy "yalochat.com/salesforce-integration/base/clients/proxy"
	salesforce "yalochat.com/salesforce-integration/base/clients/salesforce"
	helpers "yalochat.com/salesforce-integration/base/helpers"
	models "yalochat.com/salesforce-integration/base/models"
)

// SfcChatInterface is an autogenerated mock type for the SfcChatInterface type
type SfcChatInterface struct {
	mock.Mock
}

// ChatEnd provides a mock function with given fields: affinityToken, sessionKey
func (_m *SfcChatInterface) ChatEnd(affinityToken string, sessionKey string) error {
	ret := _m.Called(affinityToken, sessionKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(affinityToken, sessionKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateChat provides a mock function with given fields: _a0, _a1, _a2
func (_m *SfcChatInterface) CreateChat(_a0 string, _a1 string, _a2 chat.ChatRequest) (bool, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, chat.ChatRequest) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, chat.ChatRequest) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSession provides a mock function with given fields:
func (_m *SfcChatInterface) CreateSession() (*chat.SessionResponse, error) {
	ret := _m.Called()

	var r0 *chat.SessionResponse
	if rf, ok := ret.Get(0).(func() *chat.SessionResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chat.SessionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessages provides a mock function with given fields: affinityToken, sessionKey
func (_m *SfcChatInterface) GetMessages(affinityToken string, sessionKey string) (*chat.MessagesResponse, *helpers.ErrorResponse) {
	ret := _m.Called(affinityToken, sessionKey)

	var r0 *chat.MessagesResponse
	if rf, ok := ret.Get(0).(func(string, string) *chat.MessagesResponse); ok {
		r0 = rf(affinityToken, sessionKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chat.MessagesResponse)
		}
	}

	var r1 *helpers.ErrorResponse
	if rf, ok := ret.Get(1).(func(string, string) *helpers.ErrorResponse); ok {
		r1 = rf(affinityToken, sessionKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*helpers.ErrorResponse)
		}
	}

	return r0, r1
}

// ReconnectSession provides a mock function with given fields: affinityToken, sessionKey, offset
func (_m *SfcChatInterface) ReconnectSession(affinityToken string, sessionKey string, offset string) (*chat.MessagesResponse, error) {
	ret := _m.Called(affinityToken, sessionKey, offset)

	var r0 *chat.MessagesResponse
	if rf, ok := ret.Get(0).(func(string, string, string) *chat.MessagesResponse); ok {
		r0 = rf(affinityToken, sessionKey, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chat.MessagesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(affinityToken, sessionKey, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: _a0, _a1, _a2
func (_m *SfcChatInterface) SendMessage(_a0 string, _a1 string, _a2 chat.MessagePayload) (bool, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, chat.MessagePayload) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, chat.MessagePayload) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaleforceInterface is an autogenerated mock type for the SaleforceInterface type
type SaleforceInterface struct {
	mock.Mock
}

// Composite provides a mock function with given fields: compositeRequest
func (_m *SaleforceInterface) Composite(compositeRequest salesforce.CompositeRequest) (salesforce.CompositeResponse, error) {
	ret := _m.Called(compositeRequest)

	var r0 salesforce.CompositeResponse
	if rf, ok := ret.Get(0).(func(salesforce.CompositeRequest) salesforce.CompositeResponse); ok {
		r0 = rf(compositeRequest)
	} else {
		r0 = ret.Get(0).(salesforce.CompositeResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(salesforce.CompositeRequest) error); ok {
		r1 = rf(compositeRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCase provides a mock function with given fields: payload
func (_m *SaleforceInterface) CreateCase(payload interface{}) (string, error) {
	ret := _m.Called(payload)

	var r0 string
	if rf, ok := ret.Get(0).(func(interface{}) string); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContact provides a mock function with given fields: payload
func (_m *SaleforceInterface) CreateContact(payload salesforce.ContactRequest) (string, error) {
	ret := _m.Called(payload)

	var r0 string
	if rf, ok := ret.Get(0).(func(salesforce.ContactRequest) string); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(salesforce.ContactRequest) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContentVersion provides a mock function with given fields: _a0
func (_m *SaleforceInterface) CreateContentVersion(_a0 salesforce.ContentVersionPayload) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(salesforce.ContentVersionPayload) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(salesforce.ContentVersionPayload) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContentVersionURL provides a mock function with given fields:
func (_m *SaleforceInterface) GetContentVersionURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetDocumentLinkURL provides a mock function with given fields:
func (_m *SaleforceInterface) GetDocumentLinkURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetSearchURL provides a mock function with given fields: query
func (_m *SaleforceInterface) GetSearchURL(query string) string {
	ret := _m.Called(query)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LinkDocumentToCase provides a mock function with given fields: _a0
func (_m *SaleforceInterface) LinkDocumentToCase(_a0 salesforce.LinkDocumentPayload) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(salesforce.LinkDocumentPayload) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(salesforce.LinkDocumentPayload) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: _a0
func (_m *SaleforceInterface) Search(_a0 string) (*salesforce.SearchResponse, error) {
	ret := _m.Called(_a0)

	var r0 *salesforce.SearchResponse
	if rf, ok := ret.Get(0).(func(string) *salesforce.SearchResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*salesforce.SearchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchContact provides a mock function with given fields: _a0
func (_m *SaleforceInterface) SearchContact(_a0 string) (*models.SfcContact, error) {
	ret := _m.Called(_a0)

	var r0 *models.SfcContact
	if rf, ok := ret.Get(0).(func(string) *models.SfcContact); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SfcContact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchDocumentID provides a mock function with given fields: _a0
func (_m *SaleforceInterface) SearchDocumentID(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchID provides a mock function with given fields: _a0
func (_m *SaleforceInterface) SearchID(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProxyInterface is an autogenerated mock type for the ProxyInterface type
type ProxyInterface struct {
	mock.Mock
}

// SendHTTPRequest provides a mock function with given fields: request
func (_m *ProxyInterface) SendHTTPRequest(request *proxy.Request) (*http.Response, error) {
	ret := _m.Called(request)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(*proxy.Request) *http.Response); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*proxy.Request) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
