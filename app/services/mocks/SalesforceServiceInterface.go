// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	chat "yalochat.com/salesforce-integration/base/clients/chat"
	helpers "yalochat.com/salesforce-integration/base/helpers"

	mock "github.com/stretchr/testify/mock"

	models "yalochat.com/salesforce-integration/base/models"
)

// SalesforceServiceInterface is an autogenerated mock type for the SalesforceServiceInterface type
type SalesforceServiceInterface struct {
	mock.Mock
}

// CreatCase provides a mock function with given fields: recordType, contactId, description, origin, extraData, customFields
func (_m *SalesforceServiceInterface) CreatCase(recordType string, contactId string, description string, origin string, extraData map[string]interface{}, customFields []string) (string, error) {
	ret := _m.Called(recordType, contactId, description, origin, extraData, customFields)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string, string, map[string]interface{}, []string) string); ok {
		r0 = rf(recordType, contactId, description, origin, extraData, customFields)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, map[string]interface{}, []string) error); ok {
		r1 = rf(recordType, contactId, description, origin, extraData, customFields)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatChat provides a mock function with given fields: contactName, organizationID, deploymentID, buttonID, caseID, contactID
func (_m *SalesforceServiceInterface) CreatChat(contactName string, organizationID string, deploymentID string, buttonID string, caseID string, contactID string) (*chat.SessionResponse, error) {
	ret := _m.Called(contactName, organizationID, deploymentID, buttonID, caseID, contactID)

	var r0 *chat.SessionResponse
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) *chat.SessionResponse); ok {
		r0 = rf(contactName, organizationID, deploymentID, buttonID, caseID, contactID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chat.SessionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string) error); ok {
		r1 = rf(contactName, organizationID, deploymentID, buttonID, caseID, contactID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EndChat provides a mock function with given fields: affinityToken, sessionKey
func (_m *SalesforceServiceInterface) EndChat(affinityToken string, sessionKey string) error {
	ret := _m.Called(affinityToken, sessionKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(affinityToken, sessionKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMessages provides a mock function with given fields: affinityToken, sessionKey
func (_m *SalesforceServiceInterface) GetMessages(affinityToken string, sessionKey string) (*chat.MessagesResponse, *helpers.ErrorResponse) {
	ret := _m.Called(affinityToken, sessionKey)

	var r0 *chat.MessagesResponse
	if rf, ok := ret.Get(0).(func(string, string) *chat.MessagesResponse); ok {
		r0 = rf(affinityToken, sessionKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chat.MessagesResponse)
		}
	}

	var r1 *helpers.ErrorResponse
	if rf, ok := ret.Get(1).(func(string, string) *helpers.ErrorResponse); ok {
		r1 = rf(affinityToken, sessionKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*helpers.ErrorResponse)
		}
	}

	return r0, r1
}

// GetOrCreateContact provides a mock function with given fields: name, email, phoneNumber
func (_m *SalesforceServiceInterface) GetOrCreateContact(name string, email string, phoneNumber string) (*models.SfcContact, error) {
	ret := _m.Called(name, email, phoneNumber)

	var r0 *models.SfcContact
	if rf, ok := ret.Get(0).(func(string, string, string) *models.SfcContact); ok {
		r0 = rf(name, email, phoneNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SfcContact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(name, email, phoneNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertImageInCase provides a mock function with given fields: uri, title, mimeType, caseID
func (_m *SalesforceServiceInterface) InsertImageInCase(uri string, title string, mimeType string, caseID string) error {
	ret := _m.Called(uri, title, mimeType, caseID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(uri, title, mimeType, caseID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMessage provides a mock function with given fields: _a0, _a1, _a2
func (_m *SalesforceServiceInterface) SendMessage(_a0 string, _a1 string, _a2 chat.MessagePayload) (bool, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, chat.MessagePayload) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, chat.MessagePayload) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
