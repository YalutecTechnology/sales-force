// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	ddtrace "gopkg.in/DataDog/dd-trace-go.v1/ddtrace"
	chat "yalochat.com/salesforce-integration/base/clients/chat"

	helpers "yalochat.com/salesforce-integration/base/helpers"

	mock "github.com/stretchr/testify/mock"
)

// SfcChatInterface is an autogenerated mock type for the SfcChatInterface type
type SfcChatInterface struct {
	mock.Mock
}

// ChatEnd provides a mock function with given fields: affinityToken, sessionKey
func (_m *SfcChatInterface) ChatEnd(affinityToken string, sessionKey string) error {
	ret := _m.Called(affinityToken, sessionKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(affinityToken, sessionKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateChat provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SfcChatInterface) CreateChat(_a0 ddtrace.Span, _a1 string, _a2 string, _a3 chat.ChatRequest) (bool, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 bool
	if rf, ok := ret.Get(0).(func(ddtrace.Span, string, string, chat.ChatRequest) bool); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ddtrace.Span, string, string, chat.ChatRequest) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSession provides a mock function with given fields: mainSpan
func (_m *SfcChatInterface) CreateSession(mainSpan ddtrace.Span) (*chat.SessionResponse, error) {
	ret := _m.Called(mainSpan)

	var r0 *chat.SessionResponse
	if rf, ok := ret.Get(0).(func(ddtrace.Span) *chat.SessionResponse); ok {
		r0 = rf(mainSpan)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chat.SessionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ddtrace.Span) error); ok {
		r1 = rf(mainSpan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessages provides a mock function with given fields: mainSpan, affinityToken, sessionKey, params
func (_m *SfcChatInterface) GetMessages(mainSpan ddtrace.Span, affinityToken string, sessionKey string, params chat.GetMessagesParams) (*chat.MessagesResponse, *helpers.ErrorResponse) {
	ret := _m.Called(mainSpan, affinityToken, sessionKey, params)

	var r0 *chat.MessagesResponse
	if rf, ok := ret.Get(0).(func(ddtrace.Span, string, string, chat.GetMessagesParams) *chat.MessagesResponse); ok {
		r0 = rf(mainSpan, affinityToken, sessionKey, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chat.MessagesResponse)
		}
	}

	var r1 *helpers.ErrorResponse
	if rf, ok := ret.Get(1).(func(ddtrace.Span, string, string, chat.GetMessagesParams) *helpers.ErrorResponse); ok {
		r1 = rf(mainSpan, affinityToken, sessionKey, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*helpers.ErrorResponse)
		}
	}

	return r0, r1
}

// ReconnectSession provides a mock function with given fields: sessionKey, offset
func (_m *SfcChatInterface) ReconnectSession(sessionKey string, offset string) (*chat.MessagesResponse, error) {
	ret := _m.Called(sessionKey, offset)

	var r0 *chat.MessagesResponse
	if rf, ok := ret.Get(0).(func(string, string) *chat.MessagesResponse); ok {
		r0 = rf(sessionKey, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chat.MessagesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(sessionKey, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SfcChatInterface) SendMessage(_a0 ddtrace.Span, _a1 string, _a2 string, _a3 chat.MessagePayload) (bool, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 bool
	if rf, ok := ret.Get(0).(func(ddtrace.Span, string, string, chat.MessagePayload) bool); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ddtrace.Span, string, string, chat.MessagePayload) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateToken provides a mock function with given fields: accessToken
func (_m *SfcChatInterface) UpdateToken(accessToken string) {
	_m.Called(accessToken)
}

type mockConstructorTestingTNewSfcChatInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewSfcChatInterface creates a new instance of SfcChatInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSfcChatInterface(t mockConstructorTestingTNewSfcChatInterface) *SfcChatInterface {
	mock := &SfcChatInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
