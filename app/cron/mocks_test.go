package cron

import (
	"context"
	"time"

	"yalochat.com/salesforce-integration/base/cache"
	"yalochat.com/salesforce-integration/base/clients/chat"
	"yalochat.com/salesforce-integration/base/helpers"

	"github.com/stretchr/testify/mock"

	"yalochat.com/salesforce-integration/base/models"
)

// SalesforceServiceInterface is an autogenerated mock type for the SalesforceServiceInterface type
type SalesforceServiceInterface struct {
	mock.Mock
}

// CreatCase provides a mock function with given fields: _a0, contactID, description, subject, origin, ownerID, extraData
func (_m *SalesforceServiceInterface) CreatCase(_a0 context.Context, contactID string, description string, subject string, origin string, ownerID string, extraData map[string]interface{}) (string, error) {
	ret := _m.Called(_a0, contactID, description, subject, origin, ownerID, extraData)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, map[string]interface{}) string); ok {
		r0 = rf(_a0, contactID, description, subject, origin, ownerID, extraData)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string, map[string]interface{}) error); ok {
		r1 = rf(_a0, contactID, description, subject, origin, ownerID, extraData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatChat provides a mock function with given fields: _a0, contactName, organizationID, deploymentID, buttonID, caseID, contactID
func (_m *SalesforceServiceInterface) CreatChat(_a0 context.Context, contactName string, organizationID string, deploymentID string, buttonID string, caseID string, contactID string) (*chat.SessionResponse, error) {
	ret := _m.Called(_a0, contactName, organizationID, deploymentID, buttonID, caseID, contactID)

	var r0 *chat.SessionResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, string) *chat.SessionResponse); ok {
		r0 = rf(_a0, contactName, organizationID, deploymentID, buttonID, caseID, contactID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chat.SessionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string, string) error); ok {
		r1 = rf(_a0, contactName, organizationID, deploymentID, buttonID, caseID, contactID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EndChat provides a mock function with given fields: affinityToken, sessionKey
func (_m *SalesforceServiceInterface) EndChat(affinityToken string, sessionKey string) error {
	ret := _m.Called(affinityToken, sessionKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(affinityToken, sessionKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMessages provides a mock function with given fields: affinityToken, sessionKey
func (_m *SalesforceServiceInterface) GetMessages(affinityToken string, sessionKey string) (*chat.MessagesResponse, *helpers.ErrorResponse) {
	ret := _m.Called(affinityToken, sessionKey)

	var r0 *chat.MessagesResponse
	if rf, ok := ret.Get(0).(func(string, string) *chat.MessagesResponse); ok {
		r0 = rf(affinityToken, sessionKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chat.MessagesResponse)
		}
	}

	var r1 *helpers.ErrorResponse
	if rf, ok := ret.Get(1).(func(string, string) *helpers.ErrorResponse); ok {
		r1 = rf(affinityToken, sessionKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*helpers.ErrorResponse)
		}
	}

	return r0, r1
}

// GetOrCreateContact provides a mock function with given fields: _a0, name, email, phoneNumber
func (_m *SalesforceServiceInterface) GetOrCreateContact(_a0 context.Context, name string, email string, phoneNumber string, extraData map[string]interface{}) (*models.SfcContact, error) {
	ret := _m.Called(_a0, name, email, phoneNumber)

	var r0 *models.SfcContact
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *models.SfcContact); ok {
		r0 = rf(_a0, name, email, phoneNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SfcContact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(_a0, name, email, phoneNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertImageInCase provides a mock function with given fields: uri, title, mimeType, caseID
func (_m *SalesforceServiceInterface) InsertImageInCase(uri string, title string, mimeType string, caseID string) error {
	ret := _m.Called(uri, title, mimeType, caseID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(uri, title, mimeType, caseID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshToken provides a mock function with given fields:
func (_m *SalesforceServiceInterface) RefreshToken() {
	_m.Called()
}

// SearchContactComposite provides a mock function with given fields: email, phoneNumber
func (_m *SalesforceServiceInterface) SearchContactComposite(email string, phoneNumber string) (*models.SfcContact, *helpers.ErrorResponse) {
	ret := _m.Called(email, phoneNumber)

	var r0 *models.SfcContact
	if rf, ok := ret.Get(0).(func(string, string) *models.SfcContact); ok {
		r0 = rf(email, phoneNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SfcContact)
		}
	}

	var r1 *helpers.ErrorResponse
	if rf, ok := ret.Get(1).(func(string, string) *helpers.ErrorResponse); ok {
		r1 = rf(email, phoneNumber)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*helpers.ErrorResponse)
		}
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: _a0, _a1, _a2
func (_m *SalesforceServiceInterface) SendMessage(_a0 string, _a1 string, _a2 chat.MessagePayload) (bool, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, chat.MessagePayload) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, chat.MessagePayload) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContextCache is an autogenerated mock type for the ContextCache type
type ContextCache struct {
	mock.Mock
}

// CleanContextToDate provides a mock function with given fields: client, dateTime
func (_m *ContextCache) CleanContextToDate(client string, dateTime time.Time) error {
	ret := _m.Called(client, dateTime)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Time) error); ok {
		r0 = rf(client, dateTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetrieveContext provides a mock function with given fields: userID
func (_m *ContextCache) RetrieveContext(userID string) []cache.Context {
	ret := _m.Called(userID)

	var r0 []cache.Context
	if rf, ok := ret.Get(0).(func(string) []cache.Context); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cache.Context)
		}
	}

	return r0
}

// RetrieveContextFromSet provides a mock function with given fields: client, userID
func (_m *ContextCache) RetrieveContextFromSet(client string, userID string) []cache.Context {
	ret := _m.Called(client, userID)

	var r0 []cache.Context
	if rf, ok := ret.Get(0).(func(string, string) []cache.Context); ok {
		r0 = rf(client, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cache.Context)
		}
	}

	return r0
}

// StoreContext provides a mock function with given fields: _a0
func (_m *ContextCache) StoreContext(_a0 cache.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(cache.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreContextToSet provides a mock function with given fields: _a0
func (_m *ContextCache) StoreContextToSet(_a0 cache.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(cache.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
