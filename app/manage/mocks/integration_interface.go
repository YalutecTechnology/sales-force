// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	integrations "yalochat.com/salesforce-integration/base/clients/integrations"
)

// IntegrationInterface is an autogenerated mock type for the IntegrationInterface type
type IntegrationInterface struct {
	mock.Mock
}

// SendMessage provides a mock function with given fields: messagePayload, provider
func (_m *IntegrationInterface) SendMessage(messagePayload interface{}, provider string) (*integrations.SendMessageResponse, error) {
	ret := _m.Called(messagePayload, provider)

	var r0 *integrations.SendMessageResponse
	if rf, ok := ret.Get(0).(func(interface{}, string) *integrations.SendMessageResponse); ok {
		r0 = rf(messagePayload, provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integrations.SendMessageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, string) error); ok {
		r1 = rf(messagePayload, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhookRegister provides a mock function with given fields: HealthcheckPayload
func (_m *IntegrationInterface) WebhookRegister(HealthcheckPayload integrations.HealthcheckPayload) (*integrations.HealthcheckResponse, error) {
	ret := _m.Called(HealthcheckPayload)

	var r0 *integrations.HealthcheckResponse
	if rf, ok := ret.Get(0).(func(integrations.HealthcheckPayload) *integrations.HealthcheckResponse); ok {
		r0 = rf(HealthcheckPayload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integrations.HealthcheckResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(integrations.HealthcheckPayload) error); ok {
		r1 = rf(HealthcheckPayload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhookRemove provides a mock function with given fields: removeWebhookPayload
func (_m *IntegrationInterface) WebhookRemove(removeWebhookPayload integrations.RemoveWebhookPayload) (bool, error) {
	ret := _m.Called(removeWebhookPayload)

	var r0 bool
	if rf, ok := ret.Get(0).(func(integrations.RemoveWebhookPayload) bool); ok {
		r0 = rf(removeWebhookPayload)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(integrations.RemoveWebhookPayload) error); ok {
		r1 = rf(removeWebhookPayload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIntegrationInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewIntegrationInterface creates a new instance of IntegrationInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIntegrationInterface(t mockConstructorTestingTNewIntegrationInterface) *IntegrationInterface {
	mock := &IntegrationInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
