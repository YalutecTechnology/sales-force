// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	chat "yalochat.com/salesforce-integration/base/clients/chat"

	ddtrace "gopkg.in/DataDog/dd-trace-go.v1/ddtrace"

	helpers "yalochat.com/salesforce-integration/base/helpers"

	mock "github.com/stretchr/testify/mock"

	models "yalochat.com/salesforce-integration/base/models"
)

// SalesforceServiceInterface is an autogenerated mock type for the SalesforceServiceInterface type
type SalesforceServiceInterface struct {
	mock.Mock
}

// CreatCase provides a mock function with given fields: _a0, contactID, description, subject, origin, ownerID, extraData
func (_m *SalesforceServiceInterface) CreatCase(_a0 context.Context, contactID string, description string, subject string, origin string, ownerID string, extraData map[string]interface{}) (string, error) {
	ret := _m.Called(_a0, contactID, description, subject, origin, ownerID, extraData)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, map[string]interface{}) string); ok {
		r0 = rf(_a0, contactID, description, subject, origin, ownerID, extraData)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string, map[string]interface{}) error); ok {
		r1 = rf(_a0, contactID, description, subject, origin, ownerID, extraData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatChat provides a mock function with given fields: _a0, contactName, organizationID, deploymentID, buttonID, caseID, contactID
func (_m *SalesforceServiceInterface) CreatChat(_a0 context.Context, contactName string, organizationID string, deploymentID string, buttonID string, caseID string, contactID string) (*chat.SessionResponse, error) {
	ret := _m.Called(_a0, contactName, organizationID, deploymentID, buttonID, caseID, contactID)

	var r0 *chat.SessionResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, string) *chat.SessionResponse); ok {
		r0 = rf(_a0, contactName, organizationID, deploymentID, buttonID, caseID, contactID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chat.SessionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string, string) error); ok {
		r1 = rf(_a0, contactName, organizationID, deploymentID, buttonID, caseID, contactID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EndChat provides a mock function with given fields: affinityToken, sessionKey
func (_m *SalesforceServiceInterface) EndChat(affinityToken string, sessionKey string) error {
	ret := _m.Called(affinityToken, sessionKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(affinityToken, sessionKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMessages provides a mock function with given fields: mainSpan, affinityToken, sessionKey, ack
func (_m *SalesforceServiceInterface) GetMessages(mainSpan ddtrace.Span, affinityToken string, sessionKey string, ack int) (*chat.MessagesResponse, *helpers.ErrorResponse) {
	ret := _m.Called(mainSpan, affinityToken, sessionKey, ack)

	var r0 *chat.MessagesResponse
	if rf, ok := ret.Get(0).(func(ddtrace.Span, string, string, int) *chat.MessagesResponse); ok {
		r0 = rf(mainSpan, affinityToken, sessionKey, ack)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chat.MessagesResponse)
		}
	}

	var r1 *helpers.ErrorResponse
	if rf, ok := ret.Get(1).(func(ddtrace.Span, string, string, int) *helpers.ErrorResponse); ok {
		r1 = rf(mainSpan, affinityToken, sessionKey, ack)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*helpers.ErrorResponse)
		}
	}

	return r0, r1
}

// GetOrCreateContact provides a mock function with given fields: _a0, name, email, phoneNumber, extraData
func (_m *SalesforceServiceInterface) GetOrCreateContact(_a0 context.Context, name string, email string, phoneNumber string, extraData map[string]interface{}) (*models.SfcContact, error) {
	ret := _m.Called(_a0, name, email, phoneNumber, extraData)

	var r0 *models.SfcContact
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, map[string]interface{}) *models.SfcContact); ok {
		r0 = rf(_a0, name, email, phoneNumber, extraData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SfcContact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, map[string]interface{}) error); ok {
		r1 = rf(_a0, name, email, phoneNumber, extraData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertFileInCase provides a mock function with given fields: uri, title, mimeType, caseID
func (_m *SalesforceServiceInterface) InsertFileInCase(uri string, title string, mimeType string, caseID string) error {
	ret := _m.Called(uri, title, mimeType, caseID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(uri, title, mimeType, caseID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReconnectSession provides a mock function with given fields: sessionKey, offset
func (_m *SalesforceServiceInterface) ReconnectSession(sessionKey string, offset string) (*chat.MessagesResponse, error) {
	ret := _m.Called(sessionKey, offset)

	var r0 *chat.MessagesResponse
	if rf, ok := ret.Get(0).(func(string, string) *chat.MessagesResponse); ok {
		r0 = rf(sessionKey, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chat.MessagesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(sessionKey, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields:
func (_m *SalesforceServiceInterface) RefreshToken() {
	_m.Called()
}

// SearchContactComposite provides a mock function with given fields: email, phoneNumber
func (_m *SalesforceServiceInterface) SearchContactComposite(email string, phoneNumber string) (*models.SfcContact, *helpers.ErrorResponse) {
	ret := _m.Called(email, phoneNumber)

	var r0 *models.SfcContact
	if rf, ok := ret.Get(0).(func(string, string) *models.SfcContact); ok {
		r0 = rf(email, phoneNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SfcContact)
		}
	}

	var r1 *helpers.ErrorResponse
	if rf, ok := ret.Get(1).(func(string, string) *helpers.ErrorResponse); ok {
		r1 = rf(email, phoneNumber)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*helpers.ErrorResponse)
		}
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SalesforceServiceInterface) SendMessage(_a0 ddtrace.Span, _a1 string, _a2 string, _a3 chat.MessagePayload) (bool, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 bool
	if rf, ok := ret.Get(0).(func(ddtrace.Span, string, string, chat.MessagePayload) bool); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ddtrace.Span, string, string, chat.MessagePayload) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSalesforceServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewSalesforceServiceInterface creates a new instance of SalesforceServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSalesforceServiceInterface(t mockConstructorTestingTNewSalesforceServiceInterface) *SalesforceServiceInterface {
	mock := &SalesforceServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
