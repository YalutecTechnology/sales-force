// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	cache "yalochat.com/salesforce-integration/base/cache"

	time "time"
)

// IContextCache is an autogenerated mock type for the IContextCache type
type IContextCache struct {
	mock.Mock
}

// CleanContextToDate provides a mock function with given fields: client, dateTime
func (_m *IContextCache) CleanContextToDate(client string, dateTime time.Time) error {
	ret := _m.Called(client, dateTime)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Time) error); ok {
		r0 = rf(client, dateTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetrieveContext provides a mock function with given fields: userID
func (_m *IContextCache) RetrieveContext(userID string) []cache.Context {
	ret := _m.Called(userID)

	var r0 []cache.Context
	if rf, ok := ret.Get(0).(func(string) []cache.Context); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cache.Context)
		}
	}

	return r0
}

// RetrieveContextFromSet provides a mock function with given fields: client, userID
func (_m *IContextCache) RetrieveContextFromSet(client string, userID string) []cache.Context {
	ret := _m.Called(client, userID)

	var r0 []cache.Context
	if rf, ok := ret.Get(0).(func(string, string) []cache.Context); ok {
		r0 = rf(client, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cache.Context)
		}
	}

	return r0
}

// StoreContext provides a mock function with given fields: _a0
func (_m *IContextCache) StoreContext(_a0 cache.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(cache.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreContextToSet provides a mock function with given fields: _a0
func (_m *IContextCache) StoreContextToSet(_a0 cache.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(cache.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIContextCache interface {
	mock.TestingT
	Cleanup(func())
}

// NewIContextCache creates a new instance of IContextCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIContextCache(t mockConstructorTestingTNewIContextCache) *IContextCache {
	mock := &IContextCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
