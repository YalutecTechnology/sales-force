// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	cache "yalochat.com/salesforce-integration/base/cache"
)

// IInterconnectionCache is an autogenerated mock type for the IInterconnectionCache type
type IInterconnectionCache struct {
	mock.Mock
}

// DeleteAllInterconnections provides a mock function with given fields:
func (_m *IInterconnectionCache) DeleteAllInterconnections() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteInterconnection provides a mock function with given fields: _a0
func (_m *IInterconnectionCache) DeleteInterconnection(_a0 cache.Interconnection) (bool, error) {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(cache.Interconnection) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(cache.Interconnection) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveAllInterconnections provides a mock function with given fields: client
func (_m *IInterconnectionCache) RetrieveAllInterconnections(client string) *[]cache.Interconnection {
	ret := _m.Called(client)

	var r0 *[]cache.Interconnection
	if rf, ok := ret.Get(0).(func(string) *[]cache.Interconnection); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]cache.Interconnection)
		}
	}

	return r0
}

// RetrieveInterconnection provides a mock function with given fields: _a0
func (_m *IInterconnectionCache) RetrieveInterconnection(_a0 cache.Interconnection) (*cache.Interconnection, error) {
	ret := _m.Called(_a0)

	var r0 *cache.Interconnection
	if rf, ok := ret.Get(0).(func(cache.Interconnection) *cache.Interconnection); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cache.Interconnection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(cache.Interconnection) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreInterconnection provides a mock function with given fields: _a0
func (_m *IInterconnectionCache) StoreInterconnection(_a0 cache.Interconnection) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(cache.Interconnection) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIInterconnectionCache interface {
	mock.TestingT
	Cleanup(func())
}

// NewIInterconnectionCache creates a new instance of IInterconnectionCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIInterconnectionCache(t mockConstructorTestingTNewIInterconnectionCache) *IInterconnectionCache {
	mock := &IInterconnectionCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
